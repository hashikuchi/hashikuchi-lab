name: Test, Deploy to, and Clean up Staging

on:
  pull_request:
    branches: [ master ]
    types: [ opened, synchronize, closed ]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  test-and-deploy-staging:
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "20"
        cache: "npm"
        cache-dependency-path: lab-client/package-lock.json

    - name: Install dependencies
      working-directory: lab-client
      run: npm ci

    - name: Install Playwright browsers
      working-directory: lab-client
      run: npx playwright install --with-deps

    - name: Build application
      working-directory: lab-client
      run: npm run build

    - name: Start application in background
      working-directory: lab-client
      run: |
        npm run start &
        sleep 10

    - name: Run Playwright tests
      working-directory: lab-client
      run: npx playwright test

    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-report-staging
        path: lab-client/playwright-report/
        retention-days: 30

    - name: Set up Docker Buildx
      if: success()
      uses: docker/setup-buildx-action@v3

    - name: Log in to Azure Container Registry
      if: success()
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.ACR_SERVER_NAME }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build Docker image
      if: success()
      working-directory: lab-client
      run: docker build -t lab-client .

    - name: Tag and push Docker image (Staging)
      if: success()
      working-directory: lab-client
      run: |
        docker tag lab-client ${{ secrets.ACR_SERVER_NAME }}/lab-client:staging-pr${{ github.event.number }}
        docker push ${{ secrets.ACR_SERVER_NAME }}/lab-client:staging-pr${{ github.event.number }}

    - name: Login to Azure CLI
      if: success()
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Staging Container App
      if: success()
      run: |
        # Set variables
        STAGING_APP_NAME="hashikuchi-lab-staging-pr${{ github.event.number }}"
        RESOURCE_GROUP="${{ secrets.AZURE_RESOURCE_GROUP }}"
        ENVIRONMENT="${{ secrets.AZURE_CONTAINER_ENVIRONMENT }}"
        
        # Check if staging app exists
        if az containerapp show --name $STAGING_APP_NAME --resource-group $RESOURCE_GROUP > /dev/null 2>&1; then
          echo "Updating existing staging app: $STAGING_APP_NAME"
          az containerapp update \
            --name $STAGING_APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --image ${{ secrets.ACR_SERVER_NAME }}/lab-client:staging-pr${{ github.event.number }}
        else
          echo "Creating new staging app: $STAGING_APP_NAME"
          az containerapp create \
            --name $STAGING_APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --environment $ENVIRONMENT \
            --image ${{ secrets.ACR_SERVER_NAME }}/lab-client:staging-pr${{ github.event.number }} \
            --target-port 3000 \
            --ingress external \
            --registry-server ${{ secrets.ACR_SERVER_NAME }} \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password ${{ secrets.ACR_PASSWORD }} \
            --cpu 0.25 \
            --memory 0.5Gi \
            --min-replicas 0 \
            --max-replicas 1
        fi
        
        # Get the staging app URL
        STAGING_URL=$(az containerapp show --name $STAGING_APP_NAME --resource-group $RESOURCE_GROUP --query properties.configuration.ingress.fqdn -o tsv)
        echo "Staging app deployed at: https://$STAGING_URL"
        echo "STAGING_URL=https://$STAGING_URL" >> $GITHUB_ENV

    - name: Comment PR with staging URL
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸš€ **Staging deployment ready!**
            
            Your PR has been deployed to: ${{ env.STAGING_URL }}

            Docker image: \`${{ secrets.ACR_SERVER_NAME }}/lab-client:staging-pr${{ github.event.number }}\`

            This staging environment will be automatically cleaned up when the PR is closed.`
          })

  cleanup-staging:
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'
    
    steps:
    - name: Login to Azure CLI
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Delete staging Container App
      run: |
        STAGING_APP_NAME="hashikuchi-lab-staging-pr${{ github.event.number }}"
        RESOURCE_GROUP="${{ secrets.AZURE_RESOURCE_GROUP }}"
        
        if [ "${{ github.event.pull_request.merged }}" == "true" ]; then
          echo "PR was merged - cleaning up staging app: $STAGING_APP_NAME"
        else
          echo "PR was closed without merging - cleaning up staging app: $STAGING_APP_NAME"
        fi
        
        if az containerapp show --name $STAGING_APP_NAME --resource-group $RESOURCE_GROUP > /dev/null 2>&1; then
          az containerapp delete --name $STAGING_APP_NAME --resource-group $RESOURCE_GROUP --yes
          echo "Staging app $STAGING_APP_NAME deleted successfully"
        else
          echo "Staging app $STAGING_APP_NAME not found, skipping cleanup"
        fi

    - name: Comment on merged PR
      if: github.event.pull_request.merged == true
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `âœ… **PR merged successfully!**
            
            The staging environment \`hashikuchi-lab-staging-pr${{ github.event.number }}\` has been cleaned up.
            
            Your changes are now live in production! ðŸš€`
          })